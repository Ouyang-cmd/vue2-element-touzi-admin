{"remainingRequest":"C:\\Users\\ou943\\Desktop\\pro-vue\\vue2-element-touzi-admin\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\ou943\\Desktop\\pro-vue\\vue2-element-touzi-admin\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\ou943\\Desktop\\pro-vue\\vue2-element-touzi-admin\\src\\store\\modules\\permission.js","dependencies":[{"path":"C:\\Users\\ou943\\Desktop\\pro-vue\\vue2-element-touzi-admin\\src\\store\\modules\\permission.js","mtime":1677382302056},{"path":"C:\\Users\\ou943\\Desktop\\pro-vue\\vue2-element-touzi-admin\\babel.config.js","mtime":1677382256176},{"path":"C:\\Users\\ou943\\Desktop\\pro-vue\\vue2-element-touzi-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ou943\\Desktop\\pro-vue\\vue2-element-touzi-admin\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ou943\\Desktop\\pro-vue\\vue2-element-touzi-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport { asyncRouterMap, constantRouterMap } from '@/router';\nimport { topRouterMap } from \"@/router/topRouter\";\nimport * as mutils from '@/utils/mUtils';\n\n// 循环追加顶栏菜单\nfunction addTopRouter() {\n  asyncRouterMap.forEach(function (item) {\n    if (item.children && item.children.length >= 1) {\n      item.children.forEach(function (sitem) {\n        topRouterMap.forEach(function (citem) {\n          if (sitem.name === citem.parentName) {\n            var newChildren = item.children.concat(citem.topmenulist); // arr\n            item.children = newChildren;\n          }\n        });\n      });\n    }\n  });\n  return asyncRouterMap;\n}\n\n// 获取到当前路由对应顶部子菜单\nfunction filterTopRouters(data) {\n  var topRouters = topRouterMap.find(function (item) {\n    return item.parentName === data.name;\n  });\n  if (!mutils.isEmpty(topRouters)) {\n    return topRouters.topmenulist;\n  }\n}\n\n/**\r\n * 通过meta.role判断是否与当前用户权限匹配\r\n * @param roles\r\n * @param route\r\n */\nfunction hasPermission(roles, route) {\n  // roles为权限身份数组\n  if (route.meta && route.meta.roles) {\n    return roles.some(function (role) {\n      return route.meta.roles.indexOf(role) >= 0;\n    });\n  } else {\n    return true;\n  }\n}\n\n/**\r\n * 递归过滤异步路由表，返回符合用户角色权限的路由表\r\n * @param asyncRouterMap\r\n * @param roles\r\n */\nfunction filterAsyncRouter(asyncRouterMap, roles) {\n  // 返回满足条件的子路由对象\n  var accessedRouters = asyncRouterMap.filter(function (route) {\n    if (hasPermission(roles, route)) {\n      if (route.children && route.children.length) {\n        // route.children重新过滤赋值;\n        route.children = filterAsyncRouter(route.children, roles);\n      }\n      return true; // 返回该权限路由对象;\n    }\n\n    return false;\n  });\n  return accessedRouters;\n}\nvar permission = {\n  state: {\n    routers: constantRouterMap,\n    addRouters: [],\n    topRouters: [],\n    topTitle: '',\n    menuIndex: 0\n  },\n  getters: {\n    permission_routers: function permission_routers(state) {\n      return state.routers;\n    },\n    // 所有路由\n    addRouters: function addRouters(state) {\n      return state.addRouters;\n    },\n    // 权限过滤路由\n    topRouters: function topRouters(state) {\n      return state.topRouters;\n    },\n    // 顶部三级路由\n    topTitle: function topTitle(state) {\n      return state.topTitle;\n    },\n    // 顶部的title\n    menuIndex: function menuIndex(state) {\n      return state.menuIndex;\n    } // 顶部菜单的index\n  },\n\n  mutations: {\n    SET_ROUTERS: function SET_ROUTERS(state, routers) {\n      state.addRouters = routers; // 权限路由\n      state.routers = constantRouterMap.concat(routers); // 总路由\n    },\n\n    CLICK_INNER_LEFT_MENU: function CLICK_INNER_LEFT_MENU(state, data) {\n      // titleList:arr\n      state.topRouters = data.titleList;\n    },\n    CLICK_TOP_MENU: function CLICK_TOP_MENU(state, data) {\n      state.topTitle = data.title;\n      state.menuIndex = data.menuIndex;\n    }\n  },\n  actions: {\n    // 根据角色，重新设置权限路由;并保存到vuex中,SET_ROUTERS;\n    GenerateRoutes: function GenerateRoutes(_ref, data) {\n      var commit = _ref.commit;\n      return new Promise(function (resolve) {\n        var roles = data.roles;\n        var accessedRouters = '';\n        if (roles.indexOf('admin') >= 0) {\n          // 如果是管理员，直接将权限路由赋值给新路由;\n          accessedRouters = asyncRouterMap;\n        } else {\n          // 非管理员用户,如roles:['editor','developer']，则需要过滤权限路由数据\n          accessedRouters = filterAsyncRouter(asyncRouterMap, roles);\n        }\n        commit('SET_ROUTERS', accessedRouters);\n        resolve();\n      });\n    },\n    ClickLeftInnerMenu: function ClickLeftInnerMenu(_ref2, data) {\n      var commit = _ref2.commit;\n      commit('CLICK_INNER_LEFT_MENU', data);\n    },\n    ClickTopMenu: function ClickTopMenu(_ref3, data) {\n      var commit = _ref3.commit;\n      commit('CLICK_TOP_MENU', data);\n    }\n  }\n};\nexport default permission;",null]}