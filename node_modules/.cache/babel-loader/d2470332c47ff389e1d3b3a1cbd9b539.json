{"remainingRequest":"C:\\Users\\ou943\\Desktop\\pro-vue\\vue2-element-touzi-admin\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\ou943\\Desktop\\pro-vue\\vue2-element-touzi-admin\\src\\directive\\permission\\permission.js","dependencies":[{"path":"C:\\Users\\ou943\\Desktop\\pro-vue\\vue2-element-touzi-admin\\src\\directive\\permission\\permission.js","mtime":1677382301979},{"path":"C:\\Users\\ou943\\Desktop\\pro-vue\\vue2-element-touzi-admin\\babel.config.js","mtime":1677382256176},{"path":"C:\\Users\\ou943\\Desktop\\pro-vue\\vue2-element-touzi-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ou943\\Desktop\\pro-vue\\vue2-element-touzi-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport store from '@/store';\nexport default {\n  // inserted函数：当被绑定的元素插入到 DOM 中时……\n  inserted: function inserted(el, binding, vnode) {\n    var value = binding.value; // 获取指令绑定的值;\n    var roles = store.getters && store.getters.roles; //用户本身的roles信息,arr;\n\n    if (value && value instanceof Array && value.length > 0) {\n      var permissionRoles = value;\n      var hasPermission = roles.some(function (role) {\n        // 只要有一个满足即返回true\n        return permissionRoles.includes(role);\n      });\n      // 没有该指令,直接删除掉该指令元素;即页面不显示没有指令权限的按钮;\n      if (!hasPermission) {\n        el.parentNode && el.parentNode.removeChild(el);\n        // 因项目需要，本指令remove其父元素;一般情况下，只隐藏其本身;\n      }\n    } else {\n      throw new Error(\"need roles! Like v-permission=\\\"['admin','editor']\\\"\");\n    }\n  }\n};",{"version":3,"names":["store","inserted","el","binding","vnode","value","roles","getters","Array","length","permissionRoles","hasPermission","some","role","includes","parentNode","removeChild","Error"],"sources":["C:/Users/ou943/Desktop/pro-vue/vue2-element-touzi-admin/src/directive/permission/permission.js"],"sourcesContent":["\r\nimport store from '@/store'\r\n\r\nexport default{\r\n  // inserted函数：当被绑定的元素插入到 DOM 中时……\r\n  inserted(el, binding, vnode) {\r\n    const { value } = binding  // 获取指令绑定的值;\r\n    const roles = store.getters && store.getters.roles //用户本身的roles信息,arr;\r\n\r\n    if (value && value instanceof Array && value.length > 0) {\r\n      const permissionRoles = value\r\n\r\n      const hasPermission = roles.some(role => { // 只要有一个满足即返回true\r\n        return permissionRoles.includes(role)\r\n      })\r\n      // 没有该指令,直接删除掉该指令元素;即页面不显示没有指令权限的按钮;\r\n      if (!hasPermission) {\r\n        el.parentNode && el.parentNode.removeChild(el)\r\n        // 因项目需要，本指令remove其父元素;一般情况下，只隐藏其本身;\r\n      }\r\n    } else {\r\n      throw new Error(`need roles! Like v-permission=\"['admin','editor']\"`)\r\n    }\r\n  }\r\n}\r\n\r\n"],"mappings":";;AACA,OAAOA,KAAK,MAAM,SAAS;AAE3B,eAAc;EACZ;EACAC,QAAQ,WAAAA,SAACC,EAAE,EAAEC,OAAO,EAAEC,KAAK,EAAE;IAC3B,IAAQC,KAAK,GAAKF,OAAO,CAAjBE,KAAK,CAAY,CAAE;IAC3B,IAAMC,KAAK,GAAGN,KAAK,CAACO,OAAO,IAAIP,KAAK,CAACO,OAAO,CAACD,KAAK,EAAC;;IAEnD,IAAID,KAAK,IAAIA,KAAK,YAAYG,KAAK,IAAIH,KAAK,CAACI,MAAM,GAAG,CAAC,EAAE;MACvD,IAAMC,eAAe,GAAGL,KAAK;MAE7B,IAAMM,aAAa,GAAGL,KAAK,CAACM,IAAI,CAAC,UAAAC,IAAI,EAAI;QAAE;QACzC,OAAOH,eAAe,CAACI,QAAQ,CAACD,IAAI,CAAC;MACvC,CAAC,CAAC;MACF;MACA,IAAI,CAACF,aAAa,EAAE;QAClBT,EAAE,CAACa,UAAU,IAAIb,EAAE,CAACa,UAAU,CAACC,WAAW,CAACd,EAAE,CAAC;QAC9C;MACF;IACF,CAAC,MAAM;MACL,MAAM,IAAIe,KAAK,wDAAsD;IACvE;EACF;AACF,CAAC"}]}