{"remainingRequest":"C:\\Users\\ou943\\Desktop\\pro-vue\\vue2-element-touzi-admin\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\ou943\\Desktop\\pro-vue\\vue2-element-touzi-admin\\src\\utils\\axios.js","dependencies":[{"path":"C:\\Users\\ou943\\Desktop\\pro-vue\\vue2-element-touzi-admin\\src\\utils\\axios.js","mtime":1677339322688},{"path":"C:\\Users\\ou943\\Desktop\\pro-vue\\vue2-element-touzi-admin\\babel.config.js","mtime":1677339322548},{"path":"C:\\Users\\ou943\\Desktop\\pro-vue\\vue2-element-touzi-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ou943\\Desktop\\pro-vue\\vue2-element-touzi-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000}],"contextDependencies":[],"result":["import axios from 'axios';\nimport { Message, MessageBox } from 'element-ui';\nimport store from \"../store\";\nimport { getToken } from '@/utils/auth';\n\n// 创建axios实例\nvar service = axios.create({\n  baseURL: process.env.BASE_API,\n  // api的base_url\n  timeout: 5000 // 请求超时时间\n});\n// request拦截器\nservice.interceptors.request.use(function (config) {\n  if (store.getters.token) {\n    config.headers = {\n      'Authorization': \"Token \" + getToken('Token') //携带权限参数\n    };\n  }\n\n  return config;\n}, function (error) {\n  Promise.reject(error);\n});\n\n// respone拦截器\nservice.interceptors.response.use(function (response) {\n  /**\r\n   * code:200,接口正常返回;\r\n   */\n  var res = response.data;\n  if (res.code !== 200) {\n    Message({\n      message: res.message,\n      type: 'error',\n      duration: 5 * 1000\n    });\n    // 根据服务端约定的状态码：5001:非法的token; 5002:其他客户端登录了; 5004:Token 过期了;\n    if (res.code === 5001 || res.code === 5002 || res.code === 5004) {\n      MessageBox.confirm('你已被登出，可以取消继续留在该页面，或者重新登录', '确定登出', {\n        confirmButtonText: '重新登录',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(function () {\n        store.dispatch('LogOut').then(function () {\n          location.reload(); // 为了重新实例化vue-router对象 避免bug\n        });\n      });\n    }\n\n    return Promise.reject('error');\n  } else {\n    // res.code === 200,正常返回数据\n    return response.data;\n  }\n}, function (error) {\n  Message({\n    message: error.message,\n    type: 'error',\n    duration: 5 * 1000\n  });\n  return Promise.reject(error);\n});\nexport default service;",{"version":3,"names":["axios","Message","MessageBox","store","getToken","service","create","baseURL","process","env","BASE_API","timeout","interceptors","request","use","config","getters","token","headers","error","Promise","reject","response","res","data","code","message","type","duration","confirm","confirmButtonText","cancelButtonText","then","dispatch","location","reload"],"sources":["C:/Users/ou943/Desktop/pro-vue/vue2-element-touzi-admin/src/utils/axios.js"],"sourcesContent":["import axios from 'axios'\r\nimport { Message, MessageBox } from 'element-ui'\r\nimport store from '../store'\r\nimport { getToken } from '@/utils/auth'\r\n\r\n// 创建axios实例\r\nlet service =  axios.create({\r\n  baseURL: process.env.BASE_API, // api的base_url\r\n  timeout: 5000 // 请求超时时间\r\n})\r\n// request拦截器\r\nservice.interceptors.request.use(config => {\r\n  if (store.getters.token) {\r\n    config.headers = {\r\n      'Authorization' : \"Token \" + getToken('Token'), //携带权限参数\r\n     };\r\n  }\r\n  return config\r\n}, error => {\r\n  Promise.reject(error)\r\n})\r\n\r\n// respone拦截器\r\nservice.interceptors.response.use(\r\n  response => {\r\n   /**\r\n    * code:200,接口正常返回;\r\n    */\r\n    const res = response.data\r\n    if (res.code !== 200) {\r\n      Message({\r\n        message: res.message,\r\n        type: 'error',\r\n        duration: 5 * 1000\r\n      })\r\n      // 根据服务端约定的状态码：5001:非法的token; 5002:其他客户端登录了; 5004:Token 过期了;\r\n      if (res.code === 5001 || res.code === 5002 || res.code === 5004) {\r\n          MessageBox.confirm('你已被登出，可以取消继续留在该页面，或者重新登录', '确定登出', {\r\n            confirmButtonText: '重新登录',\r\n            cancelButtonText: '取消',\r\n            type: 'warning'\r\n          }).then(() => {\r\n            store.dispatch('LogOut').then(() => {\r\n              location.reload()// 为了重新实例化vue-router对象 避免bug\r\n            })\r\n          })\r\n      }\r\n      return Promise.reject('error')\r\n    } else { // res.code === 200,正常返回数据\r\n        return response.data\r\n    }\r\n  },\r\n  error => {\r\n    Message({\r\n      message: error.message,\r\n      type: 'error',\r\n      duration: 5 * 1000\r\n    })\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\nexport default service\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,EAAEC,UAAU,QAAQ,YAAY;AAChD,OAAOC,KAAK;AACZ,SAASC,QAAQ,QAAQ,cAAc;;AAEvC;AACA,IAAIC,OAAO,GAAIL,KAAK,CAACM,MAAM,CAAC;EAC1BC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,QAAQ;EAAE;EAC/BC,OAAO,EAAE,IAAI,CAAC;AAChB,CAAC,CAAC;AACF;AACAN,OAAO,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,UAAAC,MAAM,EAAI;EACzC,IAAIZ,KAAK,CAACa,OAAO,CAACC,KAAK,EAAE;IACvBF,MAAM,CAACG,OAAO,GAAG;MACf,eAAe,EAAG,QAAQ,GAAGd,QAAQ,CAAC,OAAO,CAAC,CAAE;IACjD,CAAC;EACJ;;EACA,OAAOW,MAAM;AACf,CAAC,EAAE,UAAAI,KAAK,EAAI;EACVC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AACvB,CAAC,CAAC;;AAEF;AACAd,OAAO,CAACO,YAAY,CAACU,QAAQ,CAACR,GAAG,CAC/B,UAAAQ,QAAQ,EAAI;EACX;AACH;AACA;EACI,IAAMC,GAAG,GAAGD,QAAQ,CAACE,IAAI;EACzB,IAAID,GAAG,CAACE,IAAI,KAAK,GAAG,EAAE;IACpBxB,OAAO,CAAC;MACNyB,OAAO,EAAEH,GAAG,CAACG,OAAO;MACpBC,IAAI,EAAE,OAAO;MACbC,QAAQ,EAAE,CAAC,GAAG;IAChB,CAAC,CAAC;IACF;IACA,IAAIL,GAAG,CAACE,IAAI,KAAK,IAAI,IAAIF,GAAG,CAACE,IAAI,KAAK,IAAI,IAAIF,GAAG,CAACE,IAAI,KAAK,IAAI,EAAE;MAC7DvB,UAAU,CAAC2B,OAAO,CAAC,0BAA0B,EAAE,MAAM,EAAE;QACrDC,iBAAiB,EAAE,MAAM;QACzBC,gBAAgB,EAAE,IAAI;QACtBJ,IAAI,EAAE;MACR,CAAC,CAAC,CAACK,IAAI,CAAC,YAAM;QACZ7B,KAAK,CAAC8B,QAAQ,CAAC,QAAQ,CAAC,CAACD,IAAI,CAAC,YAAM;UAClCE,QAAQ,CAACC,MAAM,EAAE;QACnB,CAAC,CAAC;MACJ,CAAC,CAAC;IACN;;IACA,OAAOf,OAAO,CAACC,MAAM,CAAC,OAAO,CAAC;EAChC,CAAC,MAAM;IAAE;IACL,OAAOC,QAAQ,CAACE,IAAI;EACxB;AACF,CAAC,EACD,UAAAL,KAAK,EAAI;EACPlB,OAAO,CAAC;IACNyB,OAAO,EAAEP,KAAK,CAACO,OAAO;IACtBC,IAAI,EAAE,OAAO;IACbC,QAAQ,EAAE,CAAC,GAAG;EAChB,CAAC,CAAC;EACF,OAAOR,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CACF;AAED,eAAed,OAAO"}]}